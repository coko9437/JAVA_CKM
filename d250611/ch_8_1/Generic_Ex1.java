package d250611.ch_8_1;

public class Generic_Ex1 {
    // 제너릭, 타입 안정성을 높이기 위한 방법
    // 데이터 타입에 의존하지 않는 클래스를 정의
    // <> : 다이아몬드 연산자를 통해서 표현
    
    // 왜 쓰는가? 선언한 코드를 보고 이 변수는 이 데이터타입 만 써야해! 라는 강조의 느낌.
        //  추가로 코드의 재사용성을 증가시키는게 주 목적!
        // 하나의 클래스(또는 메서드)를 여러 타입에 대해 재사용할 수있음.

    // 많이 사용하는 옵션으론...
        // <T> : 타입 파라미터 (어떤타입이든 받을 수 있음.)
        // <K,V> : Key와 Value ---> 주로 Map 데이터 형태에서 사용함.
        // <?> : 모든 타입 허용함("와일드카드")
        // <? extends T> : 허용하는 타입이 <T>이거나, <T>의 하위타입(자식타입)만 허용  ==>상한을 제한함.
            // <? extends Animal> : Animal 또는 Animal의 하위타입(도그,캣,피쉬...)
        // <? super T> : 허용타입 타입이 <T>이거나, T의 상위타입(부모타입)만 허용 ==> 하한을 제한함.

// | 비교 항목            | 제너릭 없이                             | 제너릭 사용 시                  |
// | --------------------|-----------------------------------------|--------------------------------|
// | 코드 재사용성        | 낮음 (타입마다 클래스 생성)              | 높음 (한 번 정의 후 타입만 변경)|
// | 타입 안정성          | 낮음 (Object 사용 시 런타임 오류 가능)   | 높음 (컴파일 타임에 체크)       |
// | 형변환 필요          | 있음 (`(String) obj.get()`)              | 없음                           |
// | 가독성 및 유지보수   | 어려움                                   | 쉬움                           |

        
}
